package Day11.interDemo01;
/*
接口的好处：
    1.提高了程序的扩展性
    2.降低了代码的耦合性
    3.提高开发效率

接口中自定义常量的格式：
    [public][static][final]数据类型 常量名=常量值；
接口中抽象方法的格式：
    修饰符 abstract 返回值类型 方法名()；

接口中的默认方法(jdk8.0)：
    默认方法的格式：[public] default 返回值类型 方法名(){}
    默认方法在实际开发中使用的并不多，主要的应用场景：笔试题，源码
    默认方法的注意事项：1.子类继承父类，父类实现接口，父类和接口中存在的同名变量，子类默认使用的是接口中的量
                        如果想使用父类的变量，需要使用super进行获取
                        2.子类继承父类，父类不实现接口，子类实现接口，父类和接口中存在同名的变量或者常量
                        因为接口中和父类中的变量都是num，JVM无法分别，在子类调用的时候编译报错
                        3.子类继承父类，父类实现接口，子类不实现接口，父类和接口中存在同名实例方法和默认方法
                        调用子类这个同名的方法，执行的是父类的实例方法
                        4.子类继承父类，父类不实现接口，子类实现接口，父类和接口存在同名的实例方法和默认方法
                        调用子类这个同名方法，执行的是父类的实例方法
                        5.子类没有继承，实现多个接口，且多个接口中存在同名的默认方法，当调用子类的该方法时，
                        JVM会要求子类重写这个默认方法，在子类中重写时不要添加default

接口的成员：静态方法(jdk8.0）
    注意事项：在继承关系中，子类可以通过子类类名调用父类的静态方法，但是在实现关系中，无法通过实现类的类名调用接口中的
                 静态方法，如果需要调用接口中的静态方法，需要通过接口名进行调用
              在接口中定义静态方法，public关键字可以省略不写，即使不写也是public
              父类中的静态方法，除了可以通过类名进行调用外，还可以创建父类对象，通过对象名进行调用，
              但是接口没有构造器，只能通过接口名进行调用

接口的成员：私有方法9.0JDK
    如果向上抽取的是默认方法 private 返回值类型 方法名(){}
    如果向上抽取的是静态方法 private static 返回值类型 方法名(){}










 */
public class interfaceDemo2 {
}
