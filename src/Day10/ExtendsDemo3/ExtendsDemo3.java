package Day10.ExtendsDemo3;

/*
抽象的由来：
    在代码中添加了继承思想后，存在了一定的安全隐患
    1.继承关系中父类是多个子类共同的属性和行为，理论上不可以实例化，实际是可以new对象的
    2.继承关系中父类的某些方法需要被子类重写，这个被重写的方法的方法体就不太重要了，理论上可以不写方法体
    实际上不写方法体编译报错
    3.继承关系中父类的某些方法要求被子类重写，当子类过多的情况下，万一遗漏了某个子类重写的方法，理论上如果某个子类没有重写
    父类的方法应该编译报错提醒一下，实际上没有任何提示
学习抽象类和抽象方法即可以解决上述问题
    可以把抽象类理解为一个加强版的父类

抽象类和抽象方法：
    抽象类：
        特点：1.如果一个类被声明为抽象类，不可以实例化对象
    抽象方法
注意事项：1.如果一个类被声明为抽象类，这个类不可以实例化对象
          2.抽象类是可以有构造器的，构造器的作用不是用来直接实例化对象的，而是供创建子类对象时初始化父类成员用的
          3.抽象类中可以没有抽象方法，但含有抽象方法的类一定是抽象类(接口里面也可以有抽象方法)
          4.抽象类的子类必须重写抽象父类中的所有抽象方法，否则编译报错，除非该子类也是一个抽象类


 */
public class ExtendsDemo3 {
}
